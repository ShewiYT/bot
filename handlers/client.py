import os
from random import choice, uniform, randint
import asyncio
import datetime

from aiogram import F, Router, types, Bot
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import CHANNEL_ID, REF_URL, PROMO_CODE, BOT_NAME
from keyboards.client import ClientKeyboard
from other.filters import ChatJoinFilter, RegisteredFilter
from database.db import DataBase

router = Router()


class RegisterState(StatesGroup):
    input_id = State()


class GetSignalStates(StatesGroup):
    chosing_mines = State()


@router.message(CommandStart())
async def start_command(message: types.Message, bot: Bot):
    await DataBase.register(message.from_user.id, verifed="0")
    await message.answer(f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}!</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - <b>–ø–æ–¥–ø–∏—à–∏—Å—å</b> –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªü§ù""",
                         reply_markup=await ClientKeyboard.start_keyboard(), parse_mode="HTML")


@router.callback_query(F.data.in_(["check", "back"]), ChatJoinFilter())
async def menu_output(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(f"""

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏<b>{BOT_NAME}</b>üî∏!

üöÄLucky JetüöÄ ‚Äì –Ω–æ–≤–µ–π—à–µ–µ –∞–∑–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–æ–π–¥–µ—Ç –Ω–æ–≤–æ–º—É –ø–æ–∫–æ–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–æ–≤.
–¢—ã –º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±–æ–ª—å—à–µ –±—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!

–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç ChatGPT 5.0
–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å –∏—Å—Ö–æ–¥ —Ä–∞–∫–µ—Ç–∫–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 93%.

‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ùóÔ∏è
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ)
‚ùóÔ∏è –î–õ–Ø –∏–≥—Ä—ã –±–µ–∑ —Ä–∏—Å–∫–∞ ‚ùóÔ∏è
–ù—É–∂–µ–Ω –Ω–æ–≤—ã–π, —á–∏—Å—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º
–¥–µ–ø–æ–∑–∏—Ç–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <code>{PROMO_CODE}</code> –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç +500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ)""",
                                  parse_mode="HTML", reply_markup=await ClientKeyboard.menu_keyboard())

    await callback.answer()


@router.callback_query(F.data == "register")
async def register_handler(callback: types.CallbackQuery, state: FSMContext):
    text = f"""
üî∑ 1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ <a href="{REF_URL}">1WIN</a>
üî∑ 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ (–í–∫–ª–∞–¥–∫–∞ '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).
üî∑ 3. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!"""
    photo = types.FSInputFile("reg.jpg")


    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(text, parse_mode="HTML", reply_markup=await ClientKeyboard.register_keyboard())
    await state.set_state(RegisterState.input_id)



@router.message(RegisterState.input_id)
async def register_handler_finaly(message: types.Message, state: FSMContext):

    try:
        number = int(message.text)

        if len(message.text) >= 8:
            await DataBase.update_verifed(message.from_user.id)
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.", reply_markup=await ClientKeyboard.on_register_keyboard())
            await state.clear()
        else:
            print(message.text)
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return

    except Exception as e:
        print(e)
        print(message.text)
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
        return


@router.callback_query(F.data == "instruction")
async def instucrion_handler(callback: types.CallbackQuery):
    text = f"""
–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üñ• <strong>[ChatGPT 5.0]</strong>.
–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞10.000+ –∏–≥—Ä.

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–∞—é—Ç –≤ –¥–µ–Ω—å 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞!
<code>–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ —Å–µ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏  –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92%!</code>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

üü¢ 1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ <a href="{REF_URL}">1WIN</a>
–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - –∑–∞—Ö–æ–¥–∏–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –ø–æ–ª–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ!
<code>–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç!</code>
üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
üü¢ 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üöÄ'LUCKYJET'.
üü¢ 4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ –∏ –∑–∞–±—Ä–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –±–æ—Ç–∞.
üü¢ 5. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ —Å–æ–≤–µ—Ç—É–µ–º —É–¥–≤–æ–∏—Ç—å(–•¬≤) —Å—Ç–∞–≤–∫—É —á—Ç–æ –±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –ø–æ—Ç–µ—Ä—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∏–≥–Ω–∞–ª–µ."""

    photo = types.FSInputFile("instruction.jpg")

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer_photo(photo, text, reply_markup=await ClientKeyboard.back_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "get_signal")
async def get_signal_start_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    user_data = await DataBase.get_user(user_id)
    
    if user_data:
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–∞–º–∏.",
                                      reply_markup=await ClientKeyboard.get_signal_keyboard())
    else:
        await register_handler(callback, state)
